@todo
trasformare

extern tPIDParm PIDCurrent1;
extern tPIDParm PIDCurrent2;
extern tPIDParm PIDCurrent3;
extern tPIDParm PIDPos1;
extern tPIDParm PIDPos2;
extern tPIDParm PIDPos3;

extern tPIDflags PIDCurrent1_f;
extern tPIDflags PIDCurrent2_f;
extern tPIDflags PIDCurrent3_f;
extern tPIDflags PIDPos1_f;
extern tPIDflags PIDPos2_f;
extern tPIDflags PIDPos3_f;


in una struttura del tipo

PID[3]=[
    {
        tPIDParm Current
        tPIDParm Pos
        struct flag Flag={
            tPIDflags Current
            tPIDflags Pos
        }
    }
]

anche per TRAJ

extern tTRAJParm TRAJMotor1;
extern tTRAJParm TRAJMotor2;
extern tTRAJParm TRAJMotor3;

extern tTRAJflags TRAJMotor1_f;
extern tTRAJflags TRAJMotor2_f;
extern tTRAJflags TRAJMotor3_f;

si può risolvere

TRAJ[3]=[
    struct {
        tTRAJParm param
        tTRAJflags flag
    }
]

filtro non lineare

// nonlinear filter smoothing
extern tNLFStatus Joint1NLFStatus;
extern tNLFStatus Joint2NLFStatus;
extern tNLFStatus Joint3NLFStatus;

extern tNLFOut Joint1NLFOut;
extern tNLFOut Joint2NLFOut;
extern tNLFOut Joint3NLFOut;

NLF[3]=[
    {
        tNLFStatus Status
        tNLFOut Out
    }
]


// FOR POSITION feedback
extern volatile int16_t mvelocity1,mvelocity2,mvelocity3;
extern volatile int32_t mposition1,mposition2,mposition3;

// FOR ADC samplings
extern volatile int16_t mcurrent1,mcurrent2,mcurrent3;
extern volatile int16_t mcurrent1_filt,mcurrent2_filt,mcurrent3_filt;
extern volatile int16_t rcurrent1, rcurrent2,rcurrent3;
extern volatile int16_t rcurrent1_req,rcurrent2_req,rcurrent3_req;
extern int16_t mcurrent1_offset,mcurrent2_offset,mcurrent3_offset;

MOTOR[3]=[
    int16_t velocity
    int32_t position
    int16_t mcurrent
    int16_t mcurrent_filt
    int16_t rcurrent
    int16_t rcurrent_req
    int16_t mcurrent_offset
]


file da modificare: global.c dichiarazioni, extern_globals.h definizioni del tipo.